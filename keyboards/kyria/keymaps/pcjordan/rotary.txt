bool encoder_update_user(uint8_t index, bool clockwise) {
	if (index == 0) { // left encoder
		switch(biton32(layer_state)){
			case 3:
				if (clockwise) {
					tap_code(KC_LEFT);
				} else {
					tap_code(KC_RIGHT);
				}
				break;
			case 2:
				if (clockwise) {
					tap_code16(G(KC_J));
				} else {
					tap_code16(G(KC_K));
				}
				break;
			case 1:
				if (clockwise) {
					tap_code(KC_BRIU);
				} else {
					tap_code(KC_BRID);
				}
				break;
			default:
				if (clockwise) {
					tap_code16(S(C(KC_TAB)));
				} else {
					tap_code16(C(KC_TAB));
				}
				break;
		}
	}
	else if (index == 1) { // right encoder
		switch(biton32(layer_state)){
			case 3:
				if (clockwise) {
					tap_code(KC_UP);
				} else {
					tap_code(KC_DOWN);
				}
				break;
			case 2:
				if (clockwise) {
					tap_code16(G(KC_H));
				} else {
					tap_code16(G(KC_L));
				}
				break;
			case 1:
				if (clockwise) {
					tap_code(KC_VOLU);
				} else {
					tap_code(KC_VOLD);
				}
				break;
			default:
				if (clockwise) {
					tap_code(KC_PGUP);
				} else {
					tap_code(KC_PGDN);
				}
				break;
		}
	}
	return false;
}

